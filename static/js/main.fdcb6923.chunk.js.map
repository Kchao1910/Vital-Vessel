{"version":3,"sources":["components/graph.jsx","components/tracker.jsx","components/form.jsx","components/reader.jsx","components/interface.jsx","App.js","serviceWorker.js","index.js"],"names":["LineGraph","this","props","chartData","data","labels","dateData","datasets","label","sysData","borderColor","fill","diaData","hrData","options","scales","yAxes","id","ticks","min","max","stepSize","maintainAspectRatio","annotation","drawTime","events","annotations","type","mode","yScaleID","yMin","yMax","backgroundColor","className","height","width","React","Component","Tracker","Fragment","Form","systolic","diastolic","heartRate","dateTime","onChange","onSubmit","htmlFor","name","placeholder","value","Reader","logs","map","log","key","count","slice","Interface","handleChange","event","setState","target","handleSubmit","preventDefault","state","length","concat","sort","obj1","obj2","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fdcb6923.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\"\r\nimport \"chartjs-plugin-annotation\";\r\n\r\nclass LineGraph extends React.Component {\r\n  render() {\r\n    const { dateData, sysData, diaData, hrData} = this.props;\r\n\r\n    let chartData = {\r\n      data: {\r\n        labels: dateData,\r\n        datasets: [\r\n          { label: \"Systolic\", data: sysData, borderColor: \"#ff1744\", fill: false},\r\n          { label: \"Diastolic\", data: diaData, borderColor: \"#3d5afe\", fill: false},\r\n          { label: \"Heart Rate\", data: hrData, borderColor: \"#00e676\", fill: false},\r\n        ]\r\n      },\r\n      options: {\r\n        scales: {\r\n          yAxes: [{\r\n            id: \"y-axis-0\",\r\n            ticks: {\r\n              min: 0,\r\n              max: 200,\r\n              stepSize: 10\r\n            }\r\n          }]\r\n        },\r\n        maintainAspectRatio: false,\r\n        annotation: {\r\n          drawTime: \"beforeDatasetsDraw\",\r\n          events: [\"click\"],\r\n          annotations: [\r\n            {\r\n              drawTime: \"beforeDatasetsDraw\",\r\n              id: \"box1\",\r\n              type: \"box\",\r\n              mode: \"horizontal\",\r\n              yScaleID: \"y-axis-0\",\r\n              yMin: 90,\r\n              yMax: 120,\r\n              backgroundColor: \"rgba(255, 23, 68, 0.25)\",\r\n              borderColor: \"rgba(255, 23, 68, 0.25)\"\r\n            },\r\n            {\r\n              drawTime: \"beforeDatasetsDraw\",\r\n              id: \"box2\",\r\n              type: \"box\",\r\n              yScaleID: \"y-axis-0\",\r\n              yMin: 60,\r\n              yMax: 80,\r\n              backgroundColor: \"rgba(61, 90, 254, 0.25)\",\r\n              borderColor: \"rgba(61, 90, 254, 0.25)\"\r\n            },\r\n            {\r\n              drawTime: \"beforeDatasetsDraw\",\r\n              id: \"box3\",\r\n              type: \"box\",\r\n              yScaleID: \"y-axis-0\",\r\n              yMin: 60,\r\n              yMax: 100,\r\n              backgroundColor: \"rgba(0, 230, 118, 0.25)\",\r\n              borderColor: \"rgba(0, 230, 118, 0.25)\",\r\n            }\r\n          ]\r\n        }\r\n      },\r\n    }\r\n\r\n    return (\r\n      <div className=\"chart\">\r\n        <Line data={chartData.data} height={500} width={1000} options={chartData.options}></Line>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LineGraph","import React from 'react';\r\nimport LineGraph from './graph'\r\n\r\nclass Tracker extends React.Component {\r\n  render() {\r\n    const { dateData, sysData, diaData, hrData} = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <h2>Blood Pressure History</h2>\r\n        <LineGraph dateData={dateData} sysData={sysData} diaData={diaData} hrData={hrData}></LineGraph>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tracker","import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n\r\n  render() {\r\n    const { systolic, diastolic, heartRate, dateTime, onChange, onSubmit} = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <form onSubmit={onSubmit}>\r\n          <label htmlFor=\"systolic\">Systolic</label>\r\n          <input type=\"number\" name=\"systolic\" id=\"systolic\" min=\"0\" max=\"200\" placeholder=\"120\" value={systolic} onChange={onChange}/>\r\n          <label htmlFor=\"diastolic\">Diastolic</label>\r\n          <input type=\"number\" name=\"diastolic\" id=\"diastolic\" min=\"0\" max=\"200\" placeholder=\"80\" value={diastolic} onChange={onChange}/>\r\n          <label htmlFor=\"heart-rate\">Heart Rate</label>\r\n          <input type=\"number\" name=\"heartRate\" id=\"heartRate\" min=\"0\" max=\"200\" placeholder=\"60\" value={heartRate} onChange={onChange}/>\r\n          <label htmlFor=\"datetime\">Date and Time</label>\r\n          <input type=\"datetime-local\" name=\"dateTime\" id=\"dateTime\" value={dateTime} onChange={onChange}/>\r\n          <input type=\"submit\" value=\"Add Reading\" id=\"submit-btn\"/>\r\n        </form>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form","import React from 'react';\r\nimport Form from './form'\r\n\r\nclass Reader extends React.Component {\r\n  render() {\r\n    const { onChange, onSubmit, systolic, diastolic, heartRate, dateTime, logs} = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <section id=\"bp-log\">\r\n          <h2>Blood Pressure Log</h2>\r\n          <ul>\r\n            { logs.map(log => <li key={log.count}><span>Date: {log.dateTime.slice(0,10)} {'\\u00A0'}{log.dateTime.slice(11)}</span>\r\n            <span>Blood Pressure: {log.systolic}/{log.diastolic}</span>\r\n            <span>Heart Rate: {log.heartRate}</span></li>\r\n            )}\r\n          </ul>\r\n        </section>\r\n        <section id=\"bp-reading\">\r\n          <h2>Blood Pressure Reading</h2>\r\n          <Form onChange={onChange} onSubmit={onSubmit} systolic={systolic} diastolic={diastolic} heartRate={heartRate} dateTime={dateTime}></Form>\r\n        </section>\r\n      </React.Fragment>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default Reader","import React from 'react';\r\nimport Tracker from './tracker'\r\nimport Reader from './reader'\r\n\r\nclass Interface extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      systolic: \"\",\r\n      diastolic: \"\",\r\n      heartRate: \"\",\r\n      dateTime: \"\",\r\n      logs: [],\r\n      count: 0,\r\n      dateData: [],\r\n      sysData: [],\r\n      diaData: [],\r\n      hrData: []\r\n    };\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({[event.target.id]: event.target.value})\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    let {logs, count, systolic, diastolic, heartRate, dateTime} = this.state;\r\n\r\n    this.setState({count: count + 1});\r\n\r\n    if (logs.length >= 1) {\r\n      this.setState({ logs: logs.concat({ count, systolic, diastolic, heartRate, dateTime })\r\n      .sort((obj1, obj2) => (obj1.dateTime > obj2.dateTime) ? 1 : -1) });\r\n    } else {\r\n      this.setState({ logs: logs.concat({ count, systolic, diastolic, heartRate, dateTime })});\r\n    }\r\n\r\n    this.setState({ dateData: logs.map(log => log.dateTime),\r\n      sysData: logs.map(log => log.systolic),\r\n      diaData: logs.map(log => log.diastolic),\r\n      hrData: logs.map(log => log.heartRate)\r\n     });\r\n  };\r\n\r\n  render() {\r\n    const { systolic, diastolic, heartRate, dateTime, logs, dateData, sysData, diaData, hrData} = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Tracker dateData={dateData} sysData={sysData} diaData={diaData} hrData={hrData}></Tracker>\r\n        <Reader onChange={this.handleChange} onSubmit={this.handleSubmit} systolic={systolic} diastolic={diastolic} heartRate={heartRate} dateTime={dateTime} logs={logs}></Reader>\r\n      </React.Fragment>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default Interface","import React from 'react';\nimport Interface from './components/interface'\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <header>\n        <h1>Vital Vessel</h1>\n      </header>\n      <Interface className=\"flex\"></Interface>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}